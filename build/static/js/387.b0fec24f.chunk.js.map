{"version":3,"file":"static/js/387.b0fec24f.chunk.js","mappings":"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","sources":["common/utils/useForm.tsx","common/utils/validationRules.ts","components/Block/styles.ts","components/Block/index.tsx","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/index.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { notification } from \"antd\";\nimport axios from \"axios\";\n\nexport const useForm = (validate: any) => {\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({});\n  const [shouldSubmit, setShouldSubmit] = useState(false);\n\n  const openNotificationWithIcon = () => {\n    notification[\"success\"]({\n      message: \"Success\",\n      description: \"Your message has been sent!\",\n    });\n  };\n\n  const handleSubmit = (event: React.ChangeEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setErrors(validate(values));\n    // Your url for API\n    const url = \"\";\n    if (Object.keys(values).length === 3) {\n      axios\n        .post(url, {\n          ...values,\n        })\n        .then(() => {\n          setShouldSubmit(true);\n        });\n    }\n  };\n\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && shouldSubmit) {\n      setValues(\"\");\n      openNotificationWithIcon();\n    }\n  }, [errors, shouldSubmit]);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.persist();\n    setValues((values) => ({\n      ...values,\n      [event.target.name]: event.target.value,\n    }));\n    setErrors((errors) => ({ ...errors, [event.target.name]: \"\" }));\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n    errors,\n  };\n};\n","import { validateProps } from \"../../common/types\";\n\nexport default function validate(values: validateProps) {\n  let errors = {} as validateProps;\n\n  if (!values.name) {\n    errors.name = \"Name is required\";\n  }\n  if (!values.email) {\n    errors.email = \"Email address is required\";\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\n    errors.email = \"Email address is invalid\";\n  }\n  if (!values.message) {\n    errors.message = \"Message is required\";\n  }\n  return errors;\n}\n","import styled from \"styled-components\";\n\nexport const Content = styled(\"p\")`\n  margin-top: 0rem;\n`;\n\nexport const Container = styled(\"div\")`\n  position: relative;\n  max-width: 700px;\n`;\n\nexport const TextWrapper = styled(\"div\")`\n  border-radius: 3rem;\n  max-width: 400px;\n`;\n","import { withTranslation } from \"react-i18next\";\nimport { Container, TextWrapper, Content } from \"./styles\";\n\ninterface Props {\n  title: string;\n  content: string;\n  t: any;\n}\n\nconst Block = ({ title, content, t }: Props) => {\n  return (\n    <Container>\n      <h6>{t(title)}</h6>\n      <TextWrapper>\n        <Content>{t(content)}</Content>\n      </TextWrapper>\n    </Container>\n  );\n};\n\nexport default withTranslation()(Block);\n","import styled from \"styled-components\";\n\nexport const Container = styled(\"div\")`\n  display: inline-block;\n  width: 100%;\n  padding: 10px 5px;\n`;\n\nexport const StyledInput = styled(\"input\")`\n  font-size: 0.875rem;\n`;\n","import styled from \"styled-components\";\n\nexport const StyledContainer = styled(\"div\")`\n  display: inline-block;\n  width: 100%;\n  padding: 10px 5px;\n  margin-bottom: -0.625rem;\n`;\n\nexport const StyledTextArea = styled(\"textarea\")`\n  resize: none;\n  font-size: 0.875rem;\n  height: 185px;\n`;\n\nexport const Label = styled(\"label\")`\n  display: block;\n  padding-bottom: 10px;\n  text-transform: capitalize;\n`;\n","import { withTranslation } from \"react-i18next\";\nimport { Container, StyledInput } from \"./styles\";\nimport { Label } from \"../TextArea/styles\";\nimport { InputProps } from \"../types\";\n\nconst Input = ({ name, placeholder, onChange, t }: InputProps) => (\n  <Container>\n    <Label htmlFor={name}>{t(name)}</Label>\n    <StyledInput\n      placeholder={t(placeholder)}\n      name={name}\n      id={name}\n      onChange={onChange}\n    />\n  </Container>\n);\n\nexport default withTranslation()(Input);\n","import { withTranslation } from \"react-i18next\";\nimport { StyledTextArea, StyledContainer, Label } from \"./styles\";\nimport { InputProps } from \"../types\";\n\nconst TextArea = ({ name, placeholder, onChange, t }: InputProps) => (\n  <StyledContainer>\n    <Label htmlFor={name}>{t(name)}</Label>\n    <StyledTextArea\n      placeholder={t(placeholder)}\n      id={name}\n      name={name}\n      onChange={onChange}\n    />\n  </StyledContainer>\n);\n\nexport default withTranslation()(TextArea);\n","import { Row, Col } from \"antd\";\nimport { withTranslation } from \"react-i18next\";\nimport { ContactProps, ValidationTypeProps } from \"./types\";\nimport { useForm } from \"../../common/utils/useForm\";\nimport validate from \"../../common/utils/validationRules\";\nimport { Button } from \"../../common/Button\";\nimport Block from \"../Block\";\nimport Input from \"../../common/Input\";\nimport TextArea from \"../../common/TextArea\";\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from \"./styles\";\nimport { Slide, Zoom } from \"react-awesome-reveal\";\n\nconst Contact = ({ title, content, id, t }: ContactProps) => {\n  const { values, errors, handleChange, handleSubmit } = useForm(\n    validate\n  ) as any;\n\n  const ValidationType = ({ type }: ValidationTypeProps) => {\n    const ErrorMessage = errors[type];\n    return (\n      <Zoom {...{direction : 'left'}}>\n        <Span erros={errors[type]}>{ErrorMessage}</Span>\n      </Zoom>\n    );\n  };\n\n  return (\n    <ContactContainer id={id}>\n      <Row justify=\"space-between\" align=\"middle\">\n        <Col lg={12} md={12} sm={24} xs={24}>\n          <Slide {...{direction : 'left'}}>\n            <Block title={title} content={content} />\n          </Slide>\n        </Col>\n        <Col lg={12} md={12} sm={24} xs={24}>\n          <Slide {...{direction : 'right'}}>\n            <FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\n              <Col span={24}>\n                <Input\n                  type=\"text\"\n                  name=\"name\"\n                  placeholder=\"Your Name\"\n                  value={values.name || \"\"}\n                  onChange={handleChange}\n                />\n                <ValidationType type=\"name\" />\n              </Col>\n              <Col span={24}>\n                <Input\n                  type=\"text\"\n                  name=\"email\"\n                  placeholder=\"Your Email\"\n                  value={values.email || \"\"}\n                  onChange={handleChange}\n                />\n                <ValidationType type=\"email\" />\n              </Col>\n              <Col span={24}>\n                <TextArea\n                  placeholder=\"Your Message\"\n                  value={values.message || \"\"}\n                  name=\"message\"\n                  onChange={handleChange}\n                />\n                <ValidationType type=\"message\" />\n              </Col>\n              <ButtonContainer>\n                <Button name=\"submit\">{t(\"Submit\")}</Button>\n              </ButtonContainer>\n            </FormGroup>\n          </Slide>\n        </Col>\n      </Row>\n    </ContactContainer>\n  );\n};\n\nexport default withTranslation()(Contact);\n"],"names":["useForm","validate","values","setValues","useState","errors","setErrors","shouldSubmit","setShouldSubmit","useEffect","Object","keys","length","notification","message","description","handleChange","event","persist","target","name","value","handleSubmit","preventDefault","axios","then","email","test","Content","styled","Container","TextWrapper","withTranslation","title","content","t","StyledInput","StyledContainer","StyledTextArea","Label","placeholder","onChange","htmlFor","id","ValidationType","type","ErrorMessage","direction","erros","justify","align","lg","md","sm","xs","autoComplete","onSubmit","span","Button"],"sourceRoot":""}