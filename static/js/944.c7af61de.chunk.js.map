{"version":3,"file":"static/js/944.c7af61de.chunk.js","mappings":"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","sources":["common/utils/useForm.tsx","common/utils/validationRules.ts","components/Block/styles.ts","components/Block/index.tsx","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/index.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { notification } from \"antd\";\nimport axios from \"axios\";\n\nexport const useForm = (validate: any) => {\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({});\n  const [shouldSubmit, setShouldSubmit] = useState(false);\n\n  const openNotificationWithIcon = () => {\n    notification[\"success\"]({\n      message: \"Success\",\n      description: \"Your message has been sent!\",\n    });\n  };\n\n  const handleSubmit = (event: React.ChangeEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setErrors(validate(values));\n    // Your url for API\n    const url = \"https://contact-us-server-ypg1.onrender.com/send-email\";\n    if (Object.keys(values).length === 3) {\n      axios\n        .post(url, {\n          ...values,\n        })\n        .then(() => {\n          setShouldSubmit(true);\n        });\n    }\n  };\n\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && shouldSubmit) {\n      setValues({});\n      openNotificationWithIcon();\n      setShouldSubmit(false)\n    }\n  }, [errors, shouldSubmit]);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.persist();\n    setValues((values) => ({\n      ...values,\n      [event.target.name]: event.target.value,\n    }));\n    setErrors((errors) => ({ ...errors, [event.target.name]: \"\" }));\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n    errors,\n  };\n};\n","import { validateProps } from \"../../common/types\";\n\nexport default function validate(values: validateProps) {\n  let errors = {} as validateProps;\n\n  if (!values.name) {\n    errors.name = \"Name is required\";\n  }\n  if (!values.email) {\n    errors.email = \"Email address is required\";\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\n    errors.email = \"Email address is invalid\";\n  }\n  if (!values.message) {\n    errors.message = \"Message is required\";\n  }\n  return errors;\n}\n","import styled from \"styled-components\";\n\nexport const Content = styled(\"p\")`\n  margin-top: 0rem;\n`;\n\nexport const Container = styled(\"div\")`\n  position: relative;\n  max-width: 700px;\n`;\n\nexport const TextWrapper = styled(\"div\")`\n  border-radius: 3rem;\n  max-width: 400px;\n`;\n","import { withTranslation } from \"react-i18next\";\nimport { Container, TextWrapper, Content } from \"./styles\";\n\ninterface Props {\n  title: string;\n  content: string;\n  t: any;\n}\n\nconst Block = ({ title, content, t }: Props) => {\n  return (\n    <Container>\n      <h6>{t(title)}</h6>\n      <TextWrapper>\n        <Content>{t(content)}</Content>\n      </TextWrapper>\n    </Container>\n  );\n};\n\nexport default withTranslation()(Block);\n","import styled from \"styled-components\";\n\nexport const Container = styled(\"div\")`\n  display: inline-block;\n  width: 100%;\n  padding: 10px 5px;\n`;\n\nexport const StyledInput = styled(\"input\")`\n  font-size: 0.875rem;\n`;\n","import styled from \"styled-components\";\n\nexport const StyledContainer = styled(\"div\")`\n  display: inline-block;\n  width: 100%;\n  padding: 10px 5px;\n  margin-bottom: -0.625rem;\n`;\n\nexport const StyledTextArea = styled(\"textarea\")`\n  resize: none;\n  font-size: 0.875rem;\n  height: 185px;\n`;\n\nexport const Label = styled(\"label\")`\n  display: block;\n  padding-bottom: 10px;\n  text-transform: capitalize;\n`;\n","import { withTranslation } from \"react-i18next\";\nimport { Container, StyledInput } from \"./styles\";\nimport { Label } from \"../TextArea/styles\";\nimport { InputProps } from \"../types\";\n\nconst Input = ({ name, value, placeholder, onChange, t }: InputProps) => (\n  <Container>\n    <Label htmlFor={name}>{t(name)}</Label>\n    <StyledInput\n      placeholder={t(placeholder)}\n      value={value}\n      name={name}\n      id={name}\n      onChange={onChange}\n    />\n  </Container>\n);\n\nexport default withTranslation()(Input);\n","import { withTranslation } from \"react-i18next\";\nimport { StyledTextArea, StyledContainer, Label } from \"./styles\";\nimport { InputProps } from \"../types\";\n\nconst TextArea = ({ name, value, placeholder, onChange, t }: InputProps) => (\n  <StyledContainer>\n    <Label htmlFor={name}>{t(name)}</Label>\n    <StyledTextArea\n      placeholder={t(placeholder)}\n      id={name}\n      value={value}\n      name={name}\n      onChange={onChange}\n    />\n  </StyledContainer>\n);\n\nexport default withTranslation()(TextArea);\n","import { Row, Col } from \"antd\";\nimport { withTranslation } from \"react-i18next\";\nimport { ContactProps, ValidationTypeProps } from \"./types\";\nimport { useForm } from \"../../common/utils/useForm\";\nimport validate from \"../../common/utils/validationRules\";\nimport { Button } from \"../../common/Button\";\nimport Block from \"../Block\";\nimport Input from \"../../common/Input\";\nimport TextArea from \"../../common/TextArea\";\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from \"./styles\";\nimport { Slide, Zoom } from \"react-awesome-reveal\";\n\nconst Contact = ({ title, content, id, t }: ContactProps) => {\n  const { values, errors, handleChange, handleSubmit } = useForm(\n    validate\n  ) as any;\n\n  const ValidationType = ({ type }: ValidationTypeProps) => {\n    const ErrorMessage = errors[type];\n    return (\n      <Zoom {...{direction : 'left'}}>\n        <Span erros={errors[type]}>{ErrorMessage}</Span>\n      </Zoom>\n    );\n  };\n\n  return (\n    <ContactContainer id={id}>\n      <Row justify=\"space-between\" align=\"middle\">\n        <Col lg={12} md={12} sm={24} xs={24}>\n          <Slide {...{direction : 'left'}}>\n            <Block title={title} content={content} />\n          </Slide>\n        </Col>\n        <Col lg={12} md={12} sm={24} xs={24}>\n          <Slide {...{direction : 'right'}}>\n            <FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\n              <Col span={24}>\n                <Input\n                  type=\"text\"\n                  name=\"name\"\n                  placeholder=\"Your Name\"\n                  value={values.name || \"\"}\n                  onChange={handleChange}\n                />\n                <ValidationType type=\"name\" />\n              </Col>\n              <Col span={24}>\n                <Input\n                  type=\"text\"\n                  name=\"email\"\n                  placeholder=\"Your Email\"\n                  value={values?.email || \"\"}\n                  onChange={handleChange}\n                />\n                <ValidationType type=\"email\" />\n              </Col>\n              <Col span={24}>\n                <TextArea\n                  placeholder=\"Your Message\"\n                  value={values.message || \"\"}\n                  name=\"message\"\n                  onChange={handleChange}\n                />\n                <ValidationType type=\"message\" />\n              </Col>\n              <ButtonContainer>\n                <Button name=\"submit\">{t(\"Submit\")}</Button>\n              </ButtonContainer>\n            </FormGroup>\n          </Slide>\n        </Col>\n      </Row>\n    </ContactContainer>\n  );\n};\n\nexport default withTranslation()(Contact);\n"],"names":["useForm","validate","values","setValues","useState","errors","setErrors","shouldSubmit","setShouldSubmit","useEffect","Object","keys","length","notification","message","description","handleChange","event","persist","target","name","value","handleSubmit","preventDefault","axios","then","email","test","Content","styled","_templateObject","_taggedTemplateLiteral","Container","_templateObject2","TextWrapper","_templateObject3","withTranslation","_ref","title","content","t","_jsxs","children","_jsx","StyledInput","StyledContainer","StyledTextArea","Label","placeholder","onChange","htmlFor","id","ValidationType","_ref2","type","ErrorMessage","Zoom","direction","Span","erros","ContactContainer","Row","justify","align","Col","lg","md","sm","xs","Slide","Block","FormGroup","autoComplete","onSubmit","span","Input","TextArea","ButtonContainer","Button"],"sourceRoot":""}